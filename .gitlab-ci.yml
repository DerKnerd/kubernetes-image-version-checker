stages:
  - test
  - build

test:
  image: harbor.ulbricht.casa/proxy/library/golang:1.21-alpine
  stage: test
  script:
    - go vet .
    - go build -o kubernetes-deployment-version-checker

docker-build:
  image: harbor.ulbricht.casa/proxy/library/docker:stable
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$HARBOR_USER" -p "$HARBOR_PASSWORD" harbor.ulbricht.casa
    - docker login -u "$DOCKERHUB_USER" -p "$DOCKERHUB_PASSWORD"
  script:
    - docker build --pull -t "harbor.ulbricht.casa/imanuel/kubernetes-version-checker:2.0.${CI_PIPELINE_IID}" -f ./Dockerfile .
    - docker tag "harbor.ulbricht.casa/imanuel/kubernetes-version-checker:2.0.${CI_PIPELINE_IID}" "harbor.ulbricht.casa/imanuel/kubernetes-version-checker:latest"
    - docker tag "harbor.ulbricht.casa/imanuel/kubernetes-version-checker:2.0.${CI_PIPELINE_IID}" "iulbricht/kubernetes-image-version-checker:2.0.${CI_PIPELINE_IID}"
    - docker tag "harbor.ulbricht.casa/imanuel/kubernetes-version-checker:2.0.${CI_PIPELINE_IID}" iulbricht/kubernetes-image-version-checker:latest
    - docker push "harbor.ulbricht.casa/imanuel/kubernetes-version-checker:2.0.${CI_PIPELINE_IID}"
    - docker push "harbor.ulbricht.casa/imanuel/kubernetes-version-checker:latest"
    - docker push "iulbricht/kubernetes-image-version-checker:2.0.${CI_PIPELINE_IID}"
    - docker push "iulbricht/kubernetes-image-version-checker:latest"
  rules:
    - if: $CI_COMMIT_BRANCH == "v2"
      exists:
        - Dockerfile

binary-build-linux:
  image: harbor.ulbricht.casa/proxy/library/golang:1.21-alpine
  stage: build
  script:
    - go build -o kubernetes-deployment-version-checker
  artifacts:
    paths:
      - kubernetes-deployment-version-checker
  rules:
    - if: $CI_COMMIT_BRANCH == "v2"